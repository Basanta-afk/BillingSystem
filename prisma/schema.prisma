// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?

  username String? @unique

  image    String?
  accounts Account[]
  sessions Session[]
  Order    Order[]
}

model MenuItem {
  id          String    @id @default(cuid())
  name        String
  description String
  price       Float
  image       String
  category    String    // Add category field to categorize menu items (e.g., appetizers, main courses, desserts)
  orders      Order[]
}

model Table {
  id       String @id @default(cuid())
  number   Int    @unique  // Add unique constraint on the number field to ensure each table number is unique
  capacity Int
  orders   Order[]
}

model Order {
  id          String     @id @default(cuid())
  createdAt   DateTime   @default(now())
  status      String     @default("pending")
  totalAmount Float?     // Add totalAmount field to store the calculated total amount for the order

  user        User       @relation(fields: [userId], references: [id])
  userId      String
  table       Table?     @relation(fields: [tableId], references: [id])
  tableId     String?
  items       MenuItem[]
}
